package gui;

import database.models.Customer;

import database.DataHandler;

import java.awt.*;
import java.io.IOException;
import java.sql.SQLException;
import java.time.format.DateTimeParseException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.event.*;
import java.time.LocalDate;

public class CustomerEditor extends JDialog {
    private JPanel contentPane;

    private JPanel biodataPanel;
    private JLabel firstNameLabel;
    private JLabel lastNameLabel;
    private JLabel dobLabel;
    private JLabel genderLabel;
    private JTextField firstNameField;
    private JTextField lastNameField;
    private JTextField dobField;
    private JComboBox genderBox;

    private JPanel packagePanel;
    private JLabel packageLabel;
    private JList packageList;

    private JPanel paymentPanel;
    private JLabel paymentLabel;
    private JTextField textField1;
    private JButton submitButton;

    // -----
    private final static Pattern daysPattern = Pattern.compile ("(\\d+)");

    public CustomerEditor () {
        setContentPane (contentPane);
        setModal (true);
        getRootPane ().setDefaultButton (submitButton);

        submitButton.addActionListener (e -> {
            if (!isEmpty ()) onOK ();
            else JOptionPane.showMessageDialog (
                    this,
                    "Please fill in all the details,",
                    "Invalid form",
                    JOptionPane.INFORMATION_MESSAGE
            );
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation (DO_NOTHING_ON_CLOSE);
        addWindowListener (new WindowAdapter () {
            public void windowClosing (WindowEvent e) {
                onCancel ();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction (
                e -> {
                    onCancel ();
                },
                KeyStroke.getKeyStroke (KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }

    // -----

    private void onOK () {
        String
                firstName = firstNameField.getText (),
                lastName = lastNameField.getText (),
                genderString = (String) genderBox.getSelectedItem (),
                dateOfBirthString = dobField.getText ();

        // * Data validation.
        // Gender.
        Customer.Gender gender = Customer.Gender.valueOf (genderString);
        // Date of Birth.
        LocalDate dateOfBirth = null;
        try {
            dateOfBirth = LocalDate.parse (dateOfBirthString);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog (
                    this,
                    "Enter valid Date Of Birth in yyyy-mm-dd format.",
                    "Date of Birth incorrect",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Customer creation.
        Customer c = new Customer ();
        c.setFirstName (firstName);
        c.setLastName (lastName);
        c.setGender (gender);
        c.setBirthDate (dateOfBirth);

        // Package.
        String pkgSelected = (String) packageList.getSelectedValue ();
        if (pkgSelected != null) {
            Matcher m = daysPattern.matcher (pkgSelected);
            if (m.find ()) {
                c.addDaysToMembership (Integer.parseInt (m.group (0)));
            }
        }

        // Save to Database.
        try (DataHandler dh = new DataHandler ()) {
            dh.addCustomer (c);
        } catch (SQLException e) {
            e.printStackTrace ();
            JOptionPane.showMessageDialog (
                    this,
                    "ERROR: CHECK CONSOLE",
                    "SQLException",
                    JOptionPane.ERROR_MESSAGE
            );
            dispose ();
        } catch (IOException e) {
            e.printStackTrace ();
            JOptionPane.showMessageDialog (
                    this,
                    "ERROR: CHECK CONSOLE",
                    "IOException",
                    JOptionPane.ERROR_MESSAGE
            );
        }

        dispose ();
    }

    private void onCancel () {
        // add your code here if necessary
        dispose ();
    }

    // -----

    private boolean isEmpty () {
        return
                firstNameField.getText ().isEmpty ()
                        &&
                        lastNameField.getText ().isEmpty ()
                        &&
                        dobField.getText ().isEmpty ();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$ ();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$ () {
        contentPane = new JPanel ();
        contentPane.setLayout (new BorderLayout (0, 0));
        biodataPanel = new JPanel ();
        biodataPanel.setLayout (new GridBagLayout ());
        contentPane.add (biodataPanel, BorderLayout.NORTH);
        firstNameLabel = new JLabel ();
        firstNameLabel.setText ("First Name");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints ();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 2.0;
        biodataPanel.add (firstNameLabel, gbc);
        lastNameLabel = new JLabel ();
        lastNameLabel.setText ("Last Name");
        gbc = new GridBagConstraints ();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.weightx = 2.0;
        biodataPanel.add (lastNameLabel, gbc);
        dobLabel = new JLabel ();
        dobLabel.setText ("Date of Birth");
        gbc = new GridBagConstraints ();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 2.0;
        biodataPanel.add (dobLabel, gbc);
        final JPanel spacer1 = new JPanel ();
        gbc = new GridBagConstraints ();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.VERTICAL;
        biodataPanel.add (spacer1, gbc);
        dobField = new JTextField ();
        dobField.setText ("");
        gbc = new GridBagConstraints ();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.weightx = 16.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        biodataPanel.add (dobField, gbc);
        genderLabel = new JLabel ();
        genderLabel.setText ("Gender");
        gbc = new GridBagConstraints ();
        gbc.gridx = 4;
        gbc.gridy = 2;
        gbc.weightx = 2.0;
        biodataPanel.add (genderLabel, gbc);
        firstNameField = new JTextField ();
        gbc = new GridBagConstraints ();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 16.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        biodataPanel.add (firstNameField, gbc);
        lastNameField = new JTextField ();
        gbc = new GridBagConstraints ();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.weightx = 16.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        biodataPanel.add (lastNameField, gbc);
        final JPanel spacer2 = new JPanel ();
        gbc = new GridBagConstraints ();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        biodataPanel.add (spacer2, gbc);
        final JPanel spacer3 = new JPanel ();
        gbc = new GridBagConstraints ();
        gbc.gridx = 6;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        biodataPanel.add (spacer3, gbc);
        final JPanel spacer4 = new JPanel ();
        gbc = new GridBagConstraints ();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        biodataPanel.add (spacer4, gbc);
        genderBox = new JComboBox ();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel ();
        defaultComboBoxModel1.addElement ("OTHER");
        defaultComboBoxModel1.addElement ("MALE");
        defaultComboBoxModel1.addElement ("FEMALE");
        genderBox.setModel (defaultComboBoxModel1);
        gbc = new GridBagConstraints ();
        gbc.gridx = 5;
        gbc.gridy = 2;
        gbc.weightx = 16.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        biodataPanel.add (genderBox, gbc);
        paymentPanel = new JPanel ();
        paymentPanel.setLayout (new GridBagLayout ());
        contentPane.add (paymentPanel, BorderLayout.SOUTH);
        paymentLabel = new JLabel ();
        paymentLabel.setText ("Payment Amount");
        gbc = new GridBagConstraints ();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        paymentPanel.add (paymentLabel, gbc);
        textField1 = new JTextField ();
        textField1.setEditable (false);
        textField1.setText ("");
        gbc = new GridBagConstraints ();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 16.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        paymentPanel.add (textField1, gbc);
        final JPanel spacer5 = new JPanel ();
        gbc = new GridBagConstraints ();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        paymentPanel.add (spacer5, gbc);
        submitButton = new JButton ();
        submitButton.setText ("Submit");
        gbc = new GridBagConstraints ();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weightx = 2.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        paymentPanel.add (submitButton, gbc);
        packagePanel = new JPanel ();
        packagePanel.setLayout (new GridBagLayout ());
        contentPane.add (packagePanel, BorderLayout.CENTER);
        packagePanel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createLoweredBevelBorder (), "Package Details", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$ (null, -1, -1, packagePanel.getFont ())));
        packageLabel = new JLabel ();
        packageLabel.setText ("Package:");
        gbc = new GridBagConstraints ();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.NORTH;
        packagePanel.add (packageLabel, gbc);
        packageList = new JList ();
        final DefaultListModel defaultListModel1 = new DefaultListModel ();
        defaultListModel1.addElement ("7 Days");
        defaultListModel1.addElement ("14 Days");
        defaultListModel1.addElement ("30 Days");
        defaultListModel1.addElement ("60 Days");
        defaultListModel1.addElement ("90 Days");
        defaultListModel1.addElement ("120 Days");
        defaultListModel1.addElement ("180 Days");
        defaultListModel1.addElement ("365 Days");
        packageList.setModel (defaultListModel1);
        gbc = new GridBagConstraints ();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 8.0;
        gbc.weighty = 8.0;
        gbc.fill = GridBagConstraints.BOTH;
        packagePanel.add (packageList, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$ (String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName ();
        } else {
            Font testFont = new Font (fontName, Font.PLAIN, 10);
            if (testFont.canDisplay ('a') && testFont.canDisplay ('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName ();
            }
        }
        return new Font (resultName, style >= 0 ? style : currentFont.getStyle (), size >= 0 ? size : currentFont.getSize ());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$ () {
        return contentPane;
    }
}
