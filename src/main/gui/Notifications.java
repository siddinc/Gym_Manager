package gui;

import database.DataHandler;
import database.models.Customer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

public class Notifications extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JPanel submitPanel;
    private JScrollPane essentialsScrollPane;
    private JTable essentialsTable;
    private JPanel logoPanel;
    private JLabel notificationsLabel;

    private static final int THRESHOLD_OF_ESSENTIALS = 14;

    public Notifications () {
        $$$setupUI$$$ ();
        setData ();
        setContentPane (contentPane);
        setModal (true);
        getRootPane ().setDefaultButton (buttonOK);

        buttonOK.addActionListener (e -> dispose ());
        contentPane.registerKeyboardAction (e -> dispose (), KeyStroke.getKeyStroke (KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    public static void main (String[] args) {
        Notifications dialog = new Notifications ();
        dialog.pack ();
        dialog.setVisible (true);
        System.exit (0);
    }

    private void setData () {
        // Essentials table.
        try (DataHandler dh = new DataHandler ()) {
            // Get list from database.
            List<Customer> customerList = dh.getList ();

            // Get essentials table model.
            DefaultTableModel essentialsModel = new DefaultTableModel () {
                @Override
                public boolean isCellEditable (int row, int column) {
                    return false;
                }
            };
            // Set column headers.
            essentialsModel.setColumnIdentifiers (new String[] {
                    "Name",
                    "Event"
            });
            // Add filtered data.
            customerList.stream ()
                    .forEach (e -> {
                        Vector v = e.toVector ();

                        long toBirthday = e.daysTillBirthday ();
                        long daysJoining = e.daysFromJoining ();
                        long daysMembershipEnd = e.daysTillEnd ();

                        if (0 <= toBirthday && toBirthday < THRESHOLD_OF_ESSENTIALS) {
                            Vector vEssentials = new Vector (3);
                            // Full name.
                            vEssentials.add (v.get (1) + " " + v.get (2));
                            // Event.
                            if (toBirthday == 0)
                                vEssentials.add ("Birthday!");
                            else
                                vEssentials.add (toBirthday + " days to birthday!");
                            // Add to table.
                            essentialsModel.addRow (vEssentials);
                        }

                        if (inDelta (daysJoining, THRESHOLD_OF_ESSENTIALS)) {
                            Vector vEssentials = new Vector (3);
                            // Full name.
                            vEssentials.add (v.get (1) + " " + v.get (2));
                            // Event.
                            vEssentials.add ("Days from joining: " + daysJoining);
                            // Add to table.
                            essentialsModel.addRow (vEssentials);
                        }

                        if (inDelta (daysMembershipEnd, THRESHOLD_OF_ESSENTIALS)) {
                            Vector vEssentials = new Vector (3);
                            // Full name.
                            vEssentials.add (v.get (1) + " " + v.get (2));
                            // Event.
                            vEssentials.add ("Membership end: " + daysMembershipEnd + " days");
                            // Add to table.
                            essentialsModel.addRow (vEssentials);
                        }

                    });

            essentialsTable.setModel (essentialsModel);
        } catch (SQLException e) { // TODO: Handle differently.
            e.printStackTrace ();
        } catch (IOException e) {
            e.printStackTrace ();
        }
    }

    // Utility function only.
    private static boolean inDelta (long ref, long delta) {
        return -delta < ref && ref < delta;
    }

    private void createUIComponents () {
        // Image panel.
        try {
            logoPanel = new ImagePanel (Util.resizeIcon ("resources/images/splash.gif", 300, 300).getImage ());
        } catch (Exception e) {
            e.printStackTrace ();
            logoPanel = new JPanel ();
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$ () {
        createUIComponents ();
        contentPane = new JPanel ();
        contentPane.setLayout (new GridBagLayout ());
        contentPane.setBackground (new Color (-9941126));
        contentPane.setEnabled (false);
        logoPanel.setBackground (new Color (-564));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints ();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        contentPane.add (logoPanel, gbc);
        essentialsScrollPane = new JScrollPane ();
        essentialsScrollPane.setBackground (new Color (-564));
        essentialsScrollPane.setForeground (new Color (-1));
        essentialsScrollPane.setOpaque (false);
        gbc = new GridBagConstraints ();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add (essentialsScrollPane, gbc);
        essentialsScrollPane.setBorder (BorderFactory.createTitledBorder (BorderFactory.createLoweredBevelBorder (), "Essentials", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION));
        essentialsTable = new JTable ();
        essentialsTable.setBackground (new Color (-2565668));
        essentialsScrollPane.setViewportView (essentialsTable);
        submitPanel = new JPanel ();
        submitPanel.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (1, 2, new Insets (0, 0, 0, 0), -1, -1));
        submitPanel.setBackground (new Color (-37745));
        submitPanel.setOpaque (false);
        gbc = new GridBagConstraints ();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add (submitPanel, gbc);
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer ();
        submitPanel.add (spacer1, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonOK = new JButton ();
        buttonOK.setBackground (new Color (-11916758));
        buttonOK.setText ("OK");
        submitPanel.add (buttonOK, new com.intellij.uiDesigner.core.GridConstraints (0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel ();
        panel1.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (1, 1, new Insets (0, 0, 0, 0), -1, -1));
        panel1.setBackground (new Color (-45754));
        panel1.setForeground (new Color (-16777216));
        gbc = new GridBagConstraints ();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add (panel1, gbc);
        final JLabel label1 = new JLabel ();
        Font label1Font = this.$$$getFont$$$ (null, -1, 48, label1.getFont ());
        if (label1Font != null) label1.setFont (label1Font);
        label1.setForeground (new Color (-1115905));
        label1.setText ("NOTIFICATIONS");
        panel1.add (label1, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$ (String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName ();
        } else {
            Font testFont = new Font (fontName, Font.PLAIN, 10);
            if (testFont.canDisplay ('a') && testFont.canDisplay ('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName ();
            }
        }
        return new Font (resultName, style >= 0 ? style : currentFont.getStyle (), size >= 0 ? size : currentFont.getSize ());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$ () {
        return contentPane;
    }

    // -----

    // -----
}
